// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package gocrunchybridge

import (
	"errors"
	"fmt"
)

const (
	// ClusterEnvironmentProduction is a ClusterEnvironment of type production.
	ClusterEnvironmentProduction ClusterEnvironment = "production"
)

var ErrInvalidClusterEnvironment = errors.New("not a valid ClusterEnvironment")

// String implements the Stringer interface.
func (x ClusterEnvironment) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClusterEnvironment) IsValid() bool {
	_, err := ParseClusterEnvironment(string(x))
	return err == nil
}

var _ClusterEnvironmentValue = map[string]ClusterEnvironment{
	"production": ClusterEnvironmentProduction,
}

// ParseClusterEnvironment attempts to convert a string to a ClusterEnvironment.
func ParseClusterEnvironment(name string) (ClusterEnvironment, error) {
	if x, ok := _ClusterEnvironmentValue[name]; ok {
		return x, nil
	}
	return ClusterEnvironment(""), fmt.Errorf("%s is %w", name, ErrInvalidClusterEnvironment)
}

const (
	// ClusterProviderAws is a ClusterProvider of type aws.
	ClusterProviderAws ClusterProvider = "aws"
	// ClusterProviderGcp is a ClusterProvider of type gcp.
	ClusterProviderGcp ClusterProvider = "gcp"
	// ClusterProviderAzure is a ClusterProvider of type azure.
	ClusterProviderAzure ClusterProvider = "azure"
)

var ErrInvalidClusterProvider = errors.New("not a valid ClusterProvider")

// String implements the Stringer interface.
func (x ClusterProvider) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ClusterProvider) IsValid() bool {
	_, err := ParseClusterProvider(string(x))
	return err == nil
}

var _ClusterProviderValue = map[string]ClusterProvider{
	"aws":   ClusterProviderAws,
	"gcp":   ClusterProviderGcp,
	"azure": ClusterProviderAzure,
}

// ParseClusterProvider attempts to convert a string to a ClusterProvider.
func ParseClusterProvider(name string) (ClusterProvider, error) {
	if x, ok := _ClusterProviderValue[name]; ok {
		return x, nil
	}
	return ClusterProvider(""), fmt.Errorf("%s is %w", name, ErrInvalidClusterProvider)
}

const (
	// ListFilterOrderTypeAsc is a ListFilterOrderType of type asc.
	ListFilterOrderTypeAsc ListFilterOrderType = "asc"
	// ListFilterOrderTypeDesc is a ListFilterOrderType of type desc.
	ListFilterOrderTypeDesc ListFilterOrderType = "desc"
)

var ErrInvalidListFilterOrderType = errors.New("not a valid ListFilterOrderType")

// String implements the Stringer interface.
func (x ListFilterOrderType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ListFilterOrderType) IsValid() bool {
	_, err := ParseListFilterOrderType(string(x))
	return err == nil
}

var _ListFilterOrderTypeValue = map[string]ListFilterOrderType{
	"asc":  ListFilterOrderTypeAsc,
	"desc": ListFilterOrderTypeDesc,
}

// ParseListFilterOrderType attempts to convert a string to a ListFilterOrderType.
func ParseListFilterOrderType(name string) (ListFilterOrderType, error) {
	if x, ok := _ListFilterOrderTypeValue[name]; ok {
		return x, nil
	}
	return ListFilterOrderType(""), fmt.Errorf("%s is %w", name, ErrInvalidListFilterOrderType)
}

const (
	// ListOrderFieldTypeId is a ListOrderFieldType of type id.
	ListOrderFieldTypeId ListOrderFieldType = "id"
	// ListOrderFieldTypeName is a ListOrderFieldType of type name.
	ListOrderFieldTypeName ListOrderFieldType = "name"
)

var ErrInvalidListOrderFieldType = errors.New("not a valid ListOrderFieldType")

// String implements the Stringer interface.
func (x ListOrderFieldType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ListOrderFieldType) IsValid() bool {
	_, err := ParseListOrderFieldType(string(x))
	return err == nil
}

var _ListOrderFieldTypeValue = map[string]ListOrderFieldType{
	"id":   ListOrderFieldTypeId,
	"name": ListOrderFieldTypeName,
}

// ParseListOrderFieldType attempts to convert a string to a ListOrderFieldType.
func ParseListOrderFieldType(name string) (ListOrderFieldType, error) {
	if x, ok := _ListOrderFieldTypeValue[name]; ok {
		return x, nil
	}
	return ListOrderFieldType(""), fmt.Errorf("%s is %w", name, ErrInvalidListOrderFieldType)
}
